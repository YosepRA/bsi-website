{"version":3,"file":"index.js","mappings":"mBAQAA,eAAeC,IACb,MAAMC,EAAkBC,SAASC,cAAc,uBACzCC,EAAoBF,SAASC,cAAc,yBAC3CE,EAAkBH,SAASC,cAAc,uBAEzCG,QAbRP,iBAKE,aAFmBQ,MAAM,iBAAoBC,MAAMC,GAAQA,EAAIC,QAGjE,CAOqBC,GACbC,EAAY,IAAIN,EAAKO,QACrBC,EAAa,GAAGR,EAAKS,WAAa,EAAI,IAAM,KAChDC,KAAKC,MAAwB,IAAlBX,EAAKS,YAAoB,OAEhCG,EAAW,IAAIC,KAAKb,EAAKc,eAAeC,iBAE9CpB,EAAgBqB,YAAcV,EAC9BR,EAAkBkB,YAAcR,EAChCT,EAAgBiB,YAAcJ,EAG1BZ,EAAKS,WAAa,GACpBX,EAAkBmB,UAAUC,IAAI,4BAChCpB,EAAkBmB,UAAUE,OAAO,gCAEnCrB,EAAkBmB,UAAUC,IAAI,8BAChCpB,EAAkBmB,UAAUE,OAAO,4BAEvC,CChCA,IAAeC,ICIf3B,iBAUiB,ICXjB,MACE4B,YAAYC,GACVC,KAAKC,SAAW,EAChBD,KAAKE,UAAY,GACjBF,KAAKD,IAAMA,GAAO,GAElB,MAAMI,EFDV,SAAkBN,EAAIO,GACpB,IAAIC,EAAQf,KAAKgB,MAEjB,OAAO,WACL,MAAMA,EAAMhB,KAAKgB,MAGbA,EAAMD,EENkD,MFO1DR,IAEAQ,EAAQC,EAEZ,CACF,CEZyBC,CAASP,KAAKQ,aAAaC,KAAKT,OAErDU,OAAOC,iBAAiB,SAAUR,EACpC,CAEAK,eACE,MAAMI,EAAcF,OAAOG,QACrBC,EAAeF,EAAcZ,KAAKC,UAAY,EAAI,OAAS,KAEjED,KAAKC,SAAWW,EAChBZ,KAAKE,UAAYY,EAEjBd,KAAKe,eACP,CAEAA,gBAEEf,KAAKD,IAAIiB,SAASnB,GAChBA,EAAG,CAAEI,SAAUD,KAAKC,SAAUC,UAAWF,KAAKE,aAElD,GDfiC,CATjC,SAAee,GACbC,QAAQC,IAAI,gBAAiBF,EAAYf,UAC3C,UAUM/B,IFkBNiD,YAAYjD,EEjBS,IACvB,EDlB8B,YAAxBE,SAASgD,WACXxB,IAEAxB,SAASsC,iBAAiB,mBAAoBd,E","sources":["webpack://bsi-website/./src/js/live-price.js","webpack://bsi-website/./src/js/helpers.js","webpack://bsi-website/./src/js/index.js","webpack://bsi-website/./src/js/scroll-control.js"],"sourcesContent":["async function fetchLatestPrice() {\r\n  const baseUrl = '/api/v1';\r\n\r\n  const data = await fetch(`${baseUrl}/price`).then((res) => res.json());\r\n\r\n  return data;\r\n}\r\n\r\nasync function updatePriceData() {\r\n  const navbarPriceData = document.querySelector('.navbar__price-data');\r\n  const navbarPriceChange = document.querySelector('.navbar__price-change');\r\n  const navbarPriceTime = document.querySelector('.navbar__price-time');\r\n\r\n  const data = await fetchLatestPrice();\r\n  const priceText = `$${data.price}`;\r\n  const changeText = `${data.change24Hr > 0 ? '+' : ''}${\r\n    Math.round(data.change24Hr * 100) / 100\r\n  }%`;\r\n  const timeText = new Date(data.lastUpdatedAt).toLocaleString();\r\n\r\n  navbarPriceData.textContent = priceText;\r\n  navbarPriceChange.textContent = changeText;\r\n  navbarPriceTime.textContent = timeText;\r\n\r\n  // Toggle 24 hour change text color.\r\n  if (data.change24Hr > 0) {\r\n    navbarPriceChange.classList.add('navbar__price-change--up');\r\n    navbarPriceChange.classList.remove('navbar__price-change--down');\r\n  } else {\r\n    navbarPriceChange.classList.add('navbar__price-change--down');\r\n    navbarPriceChange.classList.remove('navbar__price-change--up');\r\n  }\r\n}\r\n\r\nfunction fetchPriceOnInterval(delay) {\r\n  setInterval(updatePriceData, delay);\r\n}\r\n\r\nexport { fetchPriceOnInterval, updatePriceData };\r\n","function ready(fn) {\n  if (document.readyState !== 'loading') {\n    fn();\n  } else {\n    document.addEventListener('DOMContentLoaded', fn);\n  }\n}\n\nfunction throttle(fn, delay) {\n  let start = Date.now();\n\n  return function throttleFunction() {\n    const now = Date.now();\n\n    // If the specified delay time has passed. Run it.\n    if (now - start > delay) {\n      fn();\n\n      start = now;\n    }\n  };\n}\n\nexport { ready, throttle };\n","import { ready } from './helpers.js';\nimport ScrollControl from './scroll-control.js';\nimport { updatePriceData, fetchPriceOnInterval } from './live-price.js';\n\nasync function globalInit() {\n  function hello(scrollState) {\n    console.log('We are going:', scrollState.direction);\n  }\n\n  // function world() {\n  //   console.log('world');\n  // }\n\n  // Navbar scroll.\n  const scroll = new ScrollControl([hello]);\n\n  // Live price.\n  await updatePriceData();\n  fetchPriceOnInterval(30000);\n}\n\nready(globalInit);\n","import { throttle } from './helpers.js';\n\n// It will only provide vertical (y) scroll data for now.\nclass ScrollControl {\n  constructor(fns) {\n    this.position = 0;\n    this.direction = '';\n    this.fns = fns || [];\n\n    const handleScroll = throttle(this.updateScroll.bind(this), 300);\n\n    window.addEventListener('scroll', handleScroll);\n  }\n\n  updateScroll() {\n    const newPosition = window.scrollY;\n    const newDirection = newPosition - this.position >= 0 ? 'down' : 'up';\n\n    this.position = newPosition;\n    this.direction = newDirection;\n\n    this.callFunctions();\n  }\n\n  callFunctions() {\n    // Invoke all functions attached to this instance.\n    this.fns.forEach((fn) =>\n      fn({ position: this.position, direction: this.direction }),\n    );\n  }\n}\n\nexport default ScrollControl;\n"],"names":["async","updatePriceData","navbarPriceData","document","querySelector","navbarPriceChange","navbarPriceTime","data","fetch","then","res","json","fetchLatestPrice","priceText","price","changeText","change24Hr","Math","round","timeText","Date","lastUpdatedAt","toLocaleString","textContent","classList","add","remove","fn","constructor","fns","this","position","direction","handleScroll","delay","start","now","throttle","updateScroll","bind","window","addEventListener","newPosition","scrollY","newDirection","callFunctions","forEach","scrollState","console","log","setInterval","readyState"],"sourceRoot":""}