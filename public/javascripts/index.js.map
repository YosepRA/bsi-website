{"version":3,"file":"index.js","mappings":"mBAAA,SAASA,EAAaC,GACpB,IAAIC,EAAgB,GAEpB,OAAO,UAA8B,UAAEC,IACjCD,IAAkBC,IAEJ,SAAdA,EACFF,EAAOG,UAAUC,IAAI,UAErBJ,EAAOG,UAAUE,OAAO,UAG1BJ,EAAgBC,EAGlB,CACF,CAEA,SAASI,EAAqBC,GAC5B,IAAIN,EAAgB,GAEpB,OAAO,UAA8B,UAAEC,IACjCD,IAAkBC,IAEJ,SAAdA,EACFK,EAAeJ,UAAUC,IAAI,UAE7BG,EAAeJ,UAAUE,OAAO,UAGlCJ,EAAgBC,EAGlB,CACF,CClCA,MAAMM,EAAkBC,SAASC,cAAc,uBACzCC,EAAoBF,SAASC,cAAc,yBAC3CE,EAAkBH,SAASC,cAAc,uBAE/CG,eAAeC,IAKb,aAFmBC,MAAM,iBAAoBC,MAAMC,GAAQA,EAAIC,QAGjE,CAEAL,eAAeM,EAAgBC,GAE7B,MAAMC,EAAY,IAAID,EAAKE,QACrBC,EAAa,GAAGH,EAAKI,WAAa,EAAI,IAAM,KAChDC,KAAKC,MAAwB,IAAlBN,EAAKI,YAAoB,OAEhCG,EAAW,IAAIC,KAAKR,EAAKS,eAAeC,iBAE9CtB,EAAgBuB,YAAcV,EAC9BV,EAAkBoB,YAAcR,EAChCX,EAAgBmB,YAAcJ,EAG1BP,EAAKI,WAAa,GACpBb,EAAkBR,UAAUC,IAAI,4BAChCO,EAAkBR,UAAUE,OAAO,gCAEnCM,EAAkBR,UAAUC,IAAI,8BAChCO,EAAkBR,UAAUE,OAAO,4BAEvC,CCtBA,MAAML,EAASS,SAASC,cAAc,WAChCH,EAAiBE,SAASC,cAAc,OCX9C,IAAesB,IDafnB,iBAEiB,IEZjB,MACEoB,YAAYC,GACVC,KAAKC,SAAW,EAChBD,KAAKjC,UAAY,GACjBiC,KAAKD,IAAMA,GAAO,GAElB,MAAMG,EDDV,SAAkBL,EAAIM,GACpB,IAAIC,EAAOX,KAAKY,MAEhB,OAAO,WACL,MAAMA,EAAMZ,KAAKY,MAEbA,EAAMD,ECLkD,MDM1DP,IAEAO,EAAOC,EAEX,CACF,CCXyBC,CAASN,KAAKO,aAAaC,KAAKR,OAErDS,OAAOC,iBAAiB,SAAUR,EACpC,CAEAK,eACE,MAAMI,EAAcF,OAAOG,QACrBC,EAAeF,EAAcX,KAAKC,UAAY,EAAI,OAAS,KAEjED,KAAKC,SAAWU,EAChBX,KAAKjC,UAAY8C,EAEjBb,KAAKc,eACP,CAEAA,gBAEE,MAAMC,EAAWf,KAAKD,IAAIiB,KACvBnB,GACC,IAAIoB,SAASC,GACXA,EAAQrB,EAAG,CAAEI,SAAUD,KAAKC,SAAUlC,UAAWiC,KAAKjC,iBAI5D,OAAOkD,QAAQE,IAAIJ,EACrB,GFnBiC,CAC/BnD,EAAaC,GACbM,EAAqBC,KAFvB,MAMMa,QAAaN,UAGbK,EAAgBC,GDWtBmC,aAAY1C,UAGVM,QAFmBL,IAEE,GChBT,KAQhB,EC7B8B,YAAxBL,SAAS+C,WACXxB,IAEAvB,SAASoC,iBAAiB,mBAAoBb,E","sources":["webpack://bsi-web-client/./src/js/scroll-behaviors.js","webpack://bsi-web-client/./src/js/live-price.js","webpack://bsi-web-client/./src/js/index.js","webpack://bsi-web-client/./src/js/helpers.js","webpack://bsi-web-client/./src/js/scroll-control.js"],"sourcesContent":["function navbarScroll(navbar) {\n  let prevDirection = '';\n\n  return function navbarScrollFunction({ direction }) {\n    if (prevDirection === direction) return undefined;\n\n    if (direction === 'down') {\n      navbar.classList.add('scroll');\n    } else {\n      navbar.classList.remove('scroll');\n    }\n\n    prevDirection = direction;\n\n    return undefined;\n  };\n}\n\nfunction floatingButtonScroll(floatingButton) {\n  let prevDirection = '';\n\n  return function floatingButtonScroll({ direction }) {\n    if (prevDirection === direction) return undefined;\n\n    if (direction === 'down') {\n      floatingButton.classList.add('scroll');\n    } else {\n      floatingButton.classList.remove('scroll');\n    }\n\n    prevDirection = direction;\n\n    return undefined;\n  };\n}\n\nexport { navbarScroll, floatingButtonScroll };\n","const navbarPriceData = document.querySelector('.navbar__price-data');\r\nconst navbarPriceChange = document.querySelector('.navbar__price-change');\r\nconst navbarPriceTime = document.querySelector('.navbar__price-time');\r\n\r\nasync function fetchLatestPrice() {\r\n  const baseUrl = '/api/v1';\r\n\r\n  const data = await fetch(`${baseUrl}/price`).then((res) => res.json());\r\n\r\n  return data;\r\n}\r\n\r\nasync function updatePriceData(data) {\r\n  // const data = await fetchLatestPrice();\r\n  const priceText = `$${data.price}`;\r\n  const changeText = `${data.change24Hr > 0 ? '+' : ''}${\r\n    Math.round(data.change24Hr * 100) / 100\r\n  }%`;\r\n  const timeText = new Date(data.lastUpdatedAt).toLocaleString();\r\n\r\n  navbarPriceData.textContent = priceText;\r\n  navbarPriceChange.textContent = changeText;\r\n  navbarPriceTime.textContent = timeText;\r\n\r\n  // Toggle 24 hour change text color.\r\n  if (data.change24Hr > 0) {\r\n    navbarPriceChange.classList.add('navbar__price-change--up');\r\n    navbarPriceChange.classList.remove('navbar__price-change--down');\r\n  } else {\r\n    navbarPriceChange.classList.add('navbar__price-change--down');\r\n    navbarPriceChange.classList.remove('navbar__price-change--up');\r\n  }\r\n}\r\n\r\nfunction fetchPriceOnInterval(delay) {\r\n  setInterval(async () => {\r\n    const data = await fetchLatestPrice(data);\r\n\r\n    updatePriceData(data);\r\n  }, delay);\r\n}\r\n\r\nexport { fetchLatestPrice, fetchPriceOnInterval, updatePriceData };\r\n","import { ready } from './helpers.js';\r\nimport ScrollControl from './scroll-control.js';\r\nimport { navbarScroll, floatingButtonScroll } from './scroll-behaviors.js';\r\nimport {\r\n  fetchLatestPrice,\r\n  updatePriceData,\r\n  fetchPriceOnInterval,\r\n} from './live-price.js';\r\n// import startSocket from './socket.js';\r\n\r\nconst navbar = document.querySelector('.navbar');\r\nconst floatingButton = document.querySelector('.fb');\r\n\r\nasync function start() {\r\n  // Scroll feature.\r\n  const scroll = new ScrollControl([\r\n    navbarScroll(navbar),\r\n    floatingButtonScroll(floatingButton),\r\n  ]);\r\n\r\n  // Live price feature.\r\n  const data = await fetchLatestPrice();\r\n  const delay = 120000;\r\n\r\n  await updatePriceData(data);\r\n\r\n  fetchPriceOnInterval(delay);\r\n\r\n  // Socket will be disabled on Demo server, or Cyclic.sh server.\r\n  // startSocket();\r\n}\r\n\r\nready(start);\r\n","function ready(fn) {\r\n  if (document.readyState !== 'loading') {\r\n    fn();\r\n  } else {\r\n    document.addEventListener('DOMContentLoaded', fn);\r\n  }\r\n}\r\n\r\nfunction throttle(fn, delay) {\r\n  let prev = Date.now();\r\n\r\n  return function throttleFunction() {\r\n    const now = Date.now();\r\n\r\n    if (now - prev > delay) {\r\n      fn();\r\n\r\n      prev = now;\r\n    }\r\n  };\r\n}\r\n\r\nexport { ready, throttle };\r\n","import { throttle } from './helpers.js';\n\n// It will only provide vertical (y) scroll data for now.\nclass ScrollControl {\n  constructor(fns) {\n    this.position = 0;\n    this.direction = '';\n    this.fns = fns || [];\n\n    const handleScroll = throttle(this.updateScroll.bind(this), 200);\n\n    window.addEventListener('scroll', handleScroll);\n  }\n\n  updateScroll() {\n    const newPosition = window.scrollY;\n    const newDirection = newPosition - this.position >= 0 ? 'down' : 'up';\n\n    this.position = newPosition;\n    this.direction = newDirection;\n\n    this.callFunctions();\n  }\n\n  callFunctions() {\n    // Invoke all functions attached to this instance.\n    const promises = this.fns.map(\n      (fn) =>\n        new Promise((resolve) =>\n          resolve(fn({ position: this.position, direction: this.direction })),\n        ),\n    );\n\n    return Promise.all(promises);\n  }\n}\n\nexport default ScrollControl;\n"],"names":["navbarScroll","navbar","prevDirection","direction","classList","add","remove","floatingButtonScroll","floatingButton","navbarPriceData","document","querySelector","navbarPriceChange","navbarPriceTime","async","fetchLatestPrice","fetch","then","res","json","updatePriceData","data","priceText","price","changeText","change24Hr","Math","round","timeText","Date","lastUpdatedAt","toLocaleString","textContent","fn","constructor","fns","this","position","handleScroll","delay","prev","now","throttle","updateScroll","bind","window","addEventListener","newPosition","scrollY","newDirection","callFunctions","promises","map","Promise","resolve","all","setInterval","readyState"],"sourceRoot":""}